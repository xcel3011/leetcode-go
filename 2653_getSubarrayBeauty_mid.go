package leetcode_go

// 假设我们有一个数列或集合，其中的元素是按某种顺序排列的（通常是从小到大）。"第 x 小的数"就是这个数列或集合中按顺序排在第 x 个位置的数。
//
// 例如，给定数列 {3, 1, 4, 1, 5, 9}，按从小到大的顺序排列后得到 {1, 1, 3, 4, 5, 9}。在这个排序后的数列中，第 3 小的数是 3。
func getSubarrayBeauty(nums []int, k, x int) []int {
	const bias = 50
	cnt := [bias*2 + 1]int{}
	for _, num := range nums[:k-1] { // 先往窗口内添加 k-1 个数
		cnt[num+bias]++
	}
	ans := make([]int, len(nums)-k+1)
	for i, num := range nums[k-1:] {
		cnt[num+bias]++ // 进入窗口（保证窗口有恰好 k 个数）
		left := x
		for j, c := range cnt[:bias] { // 暴力枚举负数范围 [-50,-1]
			left -= c
			if left <= 0 { // 找到美丽值
				ans[i] = j - bias
				break
			}
		}
		cnt[nums[i]+bias]-- // 离开窗口
	}
	return ans
}

// 给你一个长度为 n 的整数数组 nums ，请你求出每个长度为 k 的子数组的 美丽值 。
//
// 一个子数组的 美丽值 定义为：如果子数组中第 x 小整数 是 负数 ，那么美丽值为第 x 小的数，否则美丽值为 0 。
//
// 请你返回一个包含 n - k + 1 个整数的数组，依次 表示数组中从第一个下标开始，每个长度为 k 的子数组的 美丽值 。
//
// 子数组指的是数组中一段连续 非空 的元素序列
// 示例 1：
//
// 输入：nums = [1,-1,-3,-2,3], k = 3, x = 2
// 输出：[-1,-2,-2]
// 解释：总共有 3 个 k = 3 的子数组。
// 第一个子数组是 [1, -1, -3] ，第二小的数是负数 -1 。
// 第二个子数组是 [-1, -3, -2] ，第二小的数是负数 -2 。
// 第三个子数组是 [-3, -2, 3] ，第二小的数是负数 -2 。
// 示例 2：
//
// 输入：nums = [-1,-2,-3,-4,-5], k = 2, x = 2
// 输出：[-1,-2,-3,-4]
// 解释：总共有 4 个 k = 2 的子数组。
// [-1, -2] 中第二小的数是负数 -1 。
// [-2, -3] 中第二小的数是负数 -2 。
// [-3, -4] 中第二小的数是负数 -3 。
// [-4, -5] 中第二小的数是负数 -4 。
// 示例 3：
//
// 输入：nums = [-3,1,2,-3,0,-3], k = 2, x = 1
// 输出：[-3,0,-3,-3,-3]
// 解释：总共有 5 个 k = 2 的子数组。
// [-3, 1] 中最小的数是负数 -3 。
// [1, 2] 中最小的数不是负数，所以美丽值为 0 。
// [2, -3] 中最小的数是负数 -3 。
// [-3, 0] 中最小的数是负数 -3 。
// [0, -3] 中最小的数是负数 -3 。
func getSubarrayBeauty250324(nums []int, k int, x int) []int {
	// 把[-50,50]的数映射到[0,100]
	offset := 50
	cnt := make([]int, 101)
	ans := make([]int, len(nums)-k+1)
	for i := 0; i < len(nums); i++ {
		cnt[nums[i]+offset]++
		if i < k-1 {
			continue
		}

		// 从负数范围内[-50,0)找第x小的数
		left := x
		for j := 0; j < offset; j++ {
			left -= cnt[j]
			if left <= 0 {
				ans[i-k+1] = j - offset
				break
			}
		}

		cnt[nums[i-k+1]+offset]--
	}

	return ans
}
