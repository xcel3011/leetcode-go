package leetcode_go

import (
	"slices"
)

// 给你一个整数数组 arr 和一个整数 k 。
// 设 m 为数组的中位数，只要满足下述两个前提之一，就可以判定 arr[i] 的值比 arr[j] 的值更强：
// |arr[i] - m| > |arr[j] - m|
// |arr[i] - m| == |arr[j] - m|，且 arr[i] > arr[j]
// 请返回由数组中最强的 k 个值组成的列表。答案可以以 任意顺序 返回。
// 中位数 是一个有序整数列表中处于中间位置的值。形式上，如果列表的长度为 n ，
// 那么中位数就是该有序列表（下标从 0 开始）中位于 ((n - 1) / 2) 的元素。
// 例如 arr = [6, -3, 7, 2, 11]，n = 5：数组排序后得到 arr = [-3, 2, 6, 7, 11] ，
// 数组的中间位置为 m = ((5 - 1) / 2) = 2 ，中位数 arr[m] 的值为 6 。
// 例如 arr = [-7, 22, 17,3]，n = 4：数组排序后得到 arr = [-7, 3, 17, 22] ，
// 数组的中间位置为 m = ((4 - 1) / 2) = 1 ，中位数 arr[m] 的值为 3 。
//
// 示例 1：
// 输入：arr = [1,2,3,4,5], k = 2
// 输出：[5,1]
// 解释：中位数为 3，按从强到弱顺序排序后，数组变为 [5,1,4,2,3]。最强的两个元素是 [5, 1]。[1, 5] 也是正确答案。
// 注意，尽管 |5 - 3| == |1 - 3| ，但是 5 比 1 更强，因为 5 > 1 。
//
// 示例 2：
// 输入：arr = [1,1,3,5,5], k = 2
// 输出：[5,5]
// 解释：中位数为 3, 按从强到弱顺序排序后，数组变为 [5,5,1,1,3]。最强的两个元素是 [5, 5]。
//
// 示例 3：
// 输入：arr = [6,7,11,7,6,8], k = 5
// 输出：[11,8,6,6,7]
// 解释：中位数为 7, 按从强到弱顺序排序后，数组变为 [11,8,6,6,7,7]。
// [11,8,6,6,7] 的任何排列都是正确答案。
//
// 提示：
// 1 <= arr.length <= 105
// -105 <= arr[i] <= 105
// 1 <= k <= arr.length
func getStrongest(arr []int, k int) []int {
	_abs := func(a int) int {
		if a < 0 {
			return -a
		}
		return a
	}

	// 先排序
	slices.Sort(arr)
	// 找到中位数m
	l, r := 0, len(arr)-1
	m := arr[(l+r)/2]
	ans := make([]int, 0, k)
	for l <= r {
		// 获取当前l和r的绝对值
		vr := _abs(arr[r] - m)
		vl := _abs(arr[l] - m)

		// 判断l和r的绝对值谁大
		// 如果相等，要取arr[r]，因为arr[r] > arr[l]
		if vr >= vl {
			ans = append(ans, arr[r])
			r--
		} else {
			ans = append(ans, arr[l])
			l++
		}

		// 当ans的长度等于k时，直接返回
		if len(ans) == k {
			break
		}
	}
	return ans
}
